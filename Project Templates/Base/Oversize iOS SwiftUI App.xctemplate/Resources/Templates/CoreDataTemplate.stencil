// swiftlint:disable all
// swiftformat:disable all
// Generated using SwiftGen â€” https://github.com/SwiftGen/SwiftGen

// swiftlint:disable superfluous_disable_command implicit_return
// swiftlint:disable sorted_imports
import CoreData
import Foundation
{% for import in param.extraImports %}
import {{ import }}
{% empty %}
{# If extraImports is a single String instead of an array, `for` considers it empty but we still have to check if there's a single String value #}
{%- if param.extraImports %}
import {{ param.extraImports }}
{% endif %}
{% endfor %}

// swiftlint:disable attributes file_length vertical_whitespace_closing_braces
// swiftlint:disable identifier_name line_length type_body_length
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}

{% for model in models %}
{% for name, entity in model.entities %}
{% set superclass %}{{ model.entities[entity.superEntity].className|default:"NSManagedObject" }}{% endset %}
{% set entityClassName %}{{ entity.className|default:"NSManagedObject" }}{% endset %}
{% set hasChildren %}{% for aName,anEntity in model.entities where anEntity.superEntity == name %}1{% endfor %}{% endset %}
// MARK: - {{ entity.name }}

{% if not entity.shouldGenerateCode %}
// Note: '{{ entity.name }}' has codegen enabled for Xcode, skipping code generation.

{% elif entityClassName|contains:"." %}
// Warning: '{{ entityClassName }}' cannot be a valid type name, skipping code generation.

{% else %}
{% if param.generateObjcName %}
@objc({{ entityClassName }})
{% endif %}
{{ accessModifier }} {%+ if not entity.isAbstract and not hasChildren %}final {%+ endif %}class {{ entityClassName }}: {{ superclass }} {
    {% set override %}{% if superclass != "NSManagedObject" %}override {%+ endif %}{% endset %}
    {{ override }}{{ accessModifier }} class var entityName: String {
        return "{{ entity.name }}"
    }

    {{ override }}{{ accessModifier }} class func entity(in managedObjectContext: NSManagedObjectContext) -> NSEntityDescription? {
        return NSEntityDescription.entity(forEntityName: entityName, in: managedObjectContext)
    }

    @available(*, deprecated, renamed: "makeFetchRequest", message: "To avoid collisions with the less concrete method in `NSManagedObject`, please use `makeFetchRequest()` instead.")
    @nonobjc {{ accessModifier }} class func fetchRequest() -> NSFetchRequest<{{ entityClassName }}> {
        return NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
    }

    @nonobjc {{ accessModifier }} class func makeFetchRequest() -> NSFetchRequest<{{ entityClassName }}> {
        return NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
    }

    {{ accessModifier }} static var all: NSFetchRequest<{{ entityClassName }}> {
        let request = {{ entityClassName }}.makeFetchRequest()
        request.sortDescriptors = [NSSortDescriptor(key: "date", ascending: true)]
        return request
    }
    
    {% if entity.relationships.count > 0 %}
    //MARK: - {{ entityClassName }} FetchRequest
    @nonobjc {{ accessModifier }} class func fetch(sort: {{ entityClassName }}.{{ entityClassName }}Properties, ascending: Bool = true, entity: {{ entityClassName }}Predicates?, limit: Int = 0) -> NSFetchRequest<{{ entityClassName }}> {
        let fetchRequest = NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: sort.rawValue, ascending: ascending)]
        if let entity {
            fetchRequest.predicate = entity.predicate
        }
        if limit != 0 {
            fetchRequest.fetchLimit = limit
        }
        return fetchRequest
    }
    {% endif %}
    
    @nonobjc {{ accessModifier }} class func fetch(sort: {{ entityClassName }}.{{ entityClassName }}Properties, ascending: Bool = true, predicate: NSPredicate, limit: Int = 0) -> NSFetchRequest<{{ entityClassName }}> {
        let fetchRequest = NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: sort.rawValue, ascending: ascending)]
        fetchRequest.predicate = predicate
        if limit != 0 {
            fetchRequest.fetchLimit = limit
        }
        return fetchRequest
    }
    
    @nonobjc {{ accessModifier }} class func fetch(sort: {{ entityClassName }}.{{ entityClassName }}Properties, ascending: Bool = true, startDate: Date? = nil, endDate: Date? = nil, limit: Int = 0) -> NSFetchRequest<{{ entityClassName }}> {
        let fetchRequest = NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: sort.rawValue, ascending: ascending)]
        if let startDate, let endDate {
            fetchRequest.predicate = NSPredicate(format: "date >= %@ AND date < %@", startDate as NSDate, endDate as NSDate)
        } else if let startDate {
            fetchRequest.predicate = NSPredicate(format: "date > %@", startDate as NSDate)
        } else if let endDate {
            fetchRequest.predicate = NSPredicate(format: "date < %@", endDate as NSDate)
        }
        if limit != 0 {
            fetchRequest.fetchLimit = limit
        }
        return fetchRequest
    }
    
    @nonobjc {{ accessModifier }} class func fetch(sort: {{ entityClassName }}.{{ entityClassName }}Properties, ascending: Bool = true, startDate: Date? = nil, endDate: Date? = nil, limit: Int = 0, custom: String) -> NSFetchRequest<{{ entityClassName }}> {
        let fetchRequest = NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: sort.rawValue, ascending: ascending)]
        if let startDate, let endDate {
            fetchRequest.predicate = NSPredicate(format: "date >= %@ AND date < %@ AND \(custom)", startDate as NSDate, endDate as NSDate)
        } else if let startDate {
            fetchRequest.predicate = NSPredicate(format: "date > %@ AND \(custom)", startDate as NSDate)
        } else if let endDate {
            fetchRequest.predicate = NSPredicate(format: "date < %@ AND \(custom)", endDate as NSDate)
        }
        if limit != 0 {
            fetchRequest.fetchLimit = limit
        }
        return fetchRequest
    }
    
    {% set hasBoolProperties %}{% for attribute in entity.attributes where attribute.type == "Boolean" %}1{% endfor %}{% endset %}
    {% if hasBoolProperties %}
    @nonobjc {{ accessModifier }} class func fetch(sort: {{ entityClassName }}.{{ entityClassName }}Properties, ascending: Bool = true, startDate: Date? = nil, endDate: Date? = nil, limit: Int = 0, boolFilter: {{ entityClassName }}.{{ entityClassName }}BoolProperties?) -> NSFetchRequest<{{ entityClassName }}> {
        let fetchRequest = NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: sort.rawValue, ascending: ascending)]
        if let boolFilter {
            if let startDate, let endDate {
                fetchRequest.predicate = NSPredicate(format: "date >= %@ AND date < %@ AND \(boolFilter.rawValue) == TRUE", startDate as NSDate, endDate as NSDate)
            } else if let startDate {
                fetchRequest.predicate = NSPredicate(format: "date > %@ AND \(boolFilter.rawValue) == TRUE", startDate as NSDate)
            } else if let endDate {
                fetchRequest.predicate = NSPredicate(format: "date < %@ AND \(boolFilter.rawValue) == TRUE", endDate as NSDate)
            } else {
                fetchRequest.predicate = NSPredicate(format: "\(boolFilter.rawValue) == TRUE")
            }
        } else {
            if let startDate, let endDate {
                fetchRequest.predicate = NSPredicate(format: "date >= %@ AND date < %@", startDate as NSDate, endDate as NSDate)
            } else if let startDate {
                fetchRequest.predicate = NSPredicate(format: "date > %@", startDate as NSDate)
            } else if let endDate {
                fetchRequest.predicate = NSPredicate(format: "date < %@", endDate as NSDate)
            }
        }
        if limit != 0 {
            fetchRequest.fetchLimit = limit
        }
        return fetchRequest
    }
    {% endif %}
    
    {% if entity.relationships.count > 0 and hasBoolProperties %}
    @nonobjc {{ accessModifier }} class func fetch(sort: {{ entityClassName }}.{{ entityClassName }}Properties, ascending: Bool = true, entity: {{ entityClassName }}Predicates?, startDate: Date? = nil, endDate: Date? = nil, limit: Int = 0, boolFilter: {{ entityClassName }}.{{ entityClassName }}BoolProperties?) -> NSFetchRequest<{{ entityClassName }}> {
        let fetchRequest = NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: sort.rawValue, ascending: ascending)]
        
        var datePredicate: NSPredicate?
        if let boolFilter {
            if let startDate, let endDate {
                datePredicate = NSPredicate(format: "date >= %@ AND date < %@ AND \(boolFilter.rawValue) == TRUE", startDate as NSDate, endDate as NSDate)
            } else if let startDate {
                datePredicate = NSPredicate(format: "date > %@ AND \(boolFilter.rawValue) == TRUE", startDate as NSDate)
            } else if let endDate {
                datePredicate = NSPredicate(format: "date < %@ AND \(boolFilter.rawValue) == TRUE", endDate as NSDate)
            } else {
                datePredicate = NSPredicate(format: "\(boolFilter.rawValue) == TRUE")
            }
        } else {
            if let startDate, let endDate {
                datePredicate = NSPredicate(format: "date >= %@ AND date < %@", startDate as NSDate, endDate as NSDate)
            } else if let startDate {
                datePredicate = NSPredicate(format: "date > %@", startDate as NSDate)
            } else if let endDate {
                datePredicate = NSPredicate(format: "date < %@", endDate as NSDate)
            }
        }

        if let typePredicate = entity?.predicate, let datePredicate {
            let andPredicate = NSCompoundPredicate(type: .and, subpredicates: [typePredicate, datePredicate])
            fetchRequest.predicate = andPredicate
        } else if let datePredicate {
            fetchRequest.predicate = datePredicate
        } else if let typePredicate = entity?.predicate {
            fetchRequest.predicate = typePredicate
        }
        
        if limit != 0 {
            fetchRequest.fetchLimit = limit
        }
        return fetchRequest
    }
    {% endif %}

    
    {% if entity.relationships.count > 0 %}
    @nonobjc {{ accessModifier }} class func fetch(sort: {{ entityClassName }}.{{ entityClassName }}Properties, ascending: Bool = true, entity: {{ entityClassName }}Predicates?, startDate: Date? = nil, endDate: Date? = nil, limit: Int = 0) -> NSFetchRequest<{{ entityClassName }}> {
        let fetchRequest = NSFetchRequest<{{ entityClassName }}>(entityName: entityName)
        fetchRequest.sortDescriptors = [NSSortDescriptor(key: sort.rawValue, ascending: ascending)]
        
        var datePredicate: NSPredicate?
        if let startDate, let endDate {
            datePredicate = NSPredicate(format: "date >= %@ AND date < %@", startDate as NSDate, endDate as NSDate)
        } else if let startDate {
            datePredicate = NSPredicate(format: "date > %@", startDate as NSDate)
        } else if let endDate {
            datePredicate = NSPredicate(format: "date < %@", endDate as NSDate)
        }
        
        if let typePredicate = entity?.predicate, let datePredicate {
            let andPredicate = NSCompoundPredicate(type: .and, subpredicates: [typePredicate, datePredicate])
            fetchRequest.predicate = andPredicate
        } else if let datePredicate {
            fetchRequest.predicate = datePredicate
        } else if let typePredicate = entity?.predicate {
            fetchRequest.predicate = typePredicate
        }
        
        if limit != 0 {
            fetchRequest.fetchLimit = limit
        }
        return fetchRequest
    }
    {% endif %}
    
    {{ accessModifier }} static func searchPredicate(query: String, field: {{ entityClassName }}.{{ entityClassName }}Properties)-> NSPredicate? {
        if query.isEmpty { return nil }
        else {
            return  NSPredicate(format: "%K BEGINSWITH[cd] %@", field.rawValue, query)
        }
    }

    
    //MARK: - {{ entityClassName }} Properties
    {{ accessModifier }} enum {{ entityClassName }}Properties: String {
        {% for attribute in entity.attributes %}
        case {{ attribute.name }} = "{{ attribute.name }}"
        {% endfor %}
    }
    
    {% if hasBoolProperties %}
    //MARK: - {{ entityClassName }} Bool Properties
    {{ accessModifier }} enum {{ entityClassName }}BoolProperties: String {
        {% for attribute in entity.attributes where attribute.type == "Boolean" %}
    case {{ attribute.name }} = "{{ attribute.name }}"
        {% endfor %}
    }
    {% endif %}
    
    
    //MARK: - {{ entityClassName }} Delete
    static func delete(_ item: {{ entityClassName }})  {
        if let context =  item.managedObjectContext {
            context.delete(item)
        }
    }

    // swiftlint:disable discouraged_optional_boolean discouraged_optional_collection implicit_getter
    {% for attribute in entity.attributes %}
    {% if attribute.userInfo.RawType %}
    {% set rawType attribute.userInfo.RawType %}
    {% set unwrapOptional attribute.userInfo.unwrapOptional %}
    {{ accessModifier }} var {{ attribute.name }}: {{ rawType }}{% if not unwrapOptional %}?{% endif %} {
        get {
            let key = "{{ attribute.name }}"
            willAccessValue(forKey: key)
            defer { didAccessValue(forKey: key) }

            guard let value = primitiveValue(forKey: key) as? {{ rawType }}.RawValue else {
                {%+ if unwrapOptional %}fatalError("Could not convert value for key '\(key)' to type '{{ rawType }}.RawValue'"){% else %}return nil{% endif +%}
            }
            {% if attribute.userInfo.nonOptionalInit or not unwrapOptional %}
            return {{ rawType }}(rawValue: value)
            {% else %}
            guard let result = {{ rawType }}(rawValue: value) else {
                fatalError("Could not convert value for key '\(key)' to type '{{ rawType }}'")
            }
            return result
            {% endif %}
        }
        {% if not attribute.isDerived %}
        set {
            let key = "{{ attribute.name }}"
            willChangeValue(forKey: key)
            defer { didChangeValue(forKey: key) }

            setPrimitiveValue(newValue{% if not unwrapOptional %}?{% endif %}.rawValue, forKey: key)
        }
        {% endif %}
    }
    {% elif attribute.usesScalarValueType and attribute.isOptional %}
    {{ accessModifier }} var {{ attribute.name }}: {{ attribute.typeName }}? {
        get {
            let key = "{{ attribute.name }}"
            willAccessValue(forKey: key)
            defer { didAccessValue(forKey: key) }

            return primitiveValue(forKey: key) as? {{ attribute.typeName }}
        }
        {% if not attribute.isDerived %}
        set {
            let key = "{{ attribute.name }}"
            willChangeValue(forKey: key)
            defer { didChangeValue(forKey: key) }

            setPrimitiveValue(newValue, forKey: key)
        }
        {% endif %}
    }
    {% elif attribute.isDerived %}
    {{ accessModifier }} var {{ attribute.name }}: {{ attribute.typeName }}{% if attribute.isOptional %}?{% endif %} {
        let key = "{{ attribute.name }}"
        willAccessValue(forKey: key)
        defer { didAccessValue(forKey: key) }

        {% if attribute.isOptional %}
        return primitiveValue(forKey: key) as? {{ attribute.typeName }}
        {% else %}
        guard let value = primitiveValue(forKey: key) as? {{ attribute.typeName }} else {
            fatalError("Could not convert value for key '\(key)' to type '{{ attribute.typeName }}'")
        }
        return value
        {% endif %}
    }
    {% else %}
    @NSManaged {{ accessModifier }} var {{ attribute.name }}: {{ attribute.typeName }}{% if attribute.isOptional %}?{% endif +%}
    {% endif %}
    {% endfor %}
    {% for relationship in entity.relationships %}
    {% if relationship.isToMany %}
    @NSManaged {{ accessModifier }} var {{ relationship.name }}: {%+ if relationship.isOrdered %}NSOrderedSet{% else %}Set<{{ model.entities[relationship.destinationEntity].className|default:"NSManagedObject" }}>{% endif %}{% if relationship.isOptional %}?{% endif +%}
    {% else %}
    @NSManaged {{ accessModifier }} var {{ relationship.name }}: {{ model.entities[relationship.destinationEntity].className|default:"NSManagedObject" }}{% if relationship.isOptional %}?{% endif +%}
    {% endif %}
    {% endfor %}
    {% for fetchedProperty in entity.fetchedProperties %}
    @NSManaged {{ accessModifier }} var {{ fetchedProperty.name }}: [{{ model.entities[fetchedProperty.fetchRequest.entity].className|default:"NSManagedObject" }}]
    {% endfor %}
    
    // MARK: - {{ entityClassName }} NSPredicate
    
    {% if entity.relationships.count > 0 %}
    {{ accessModifier }} enum {{ entityClassName }}Predicates {
        {% for relationship in entity.relationships %}
        case {{ relationship.name }}(_ {{ relationship.name }}: {{ model.entities[relationship.destinationEntity].className }})
        {% endfor %}
        
        {{ accessModifier }} var predicate: NSPredicate {
            switch self {
                {% for relationship in entity.relationships %}
                case let .{{ relationship.name }}({{ relationship.name }}):
                    return NSPredicate(format: "ANY {{ relationship.name }} == %@", {{ relationship.name }})
                {% endfor %}
            }
        }
    }
    {% endif %}

    // swiftlint:enable discouraged_optional_boolean discouraged_optional_collection implicit_getter
}

// MARK: Identifiable {{ entityClassName }}

extension {{ entityClassName }}: Identifiable { }

{% for relationship in entity.relationships where relationship.isToMany %}
{% set destinationEntityClassName %}{{ model.entities[relationship.destinationEntity].className|default:"NSManagedObject" }}{% endset %}
{% set collectionClassName %}{% if relationship.isOrdered %}NSOrderedSet{% else %}Set<{{ destinationEntityClassName }}>{% endif %}{% endset %}
{% set relationshipName %}{{ relationship.name | upperFirstLetter }}{% endset %}
// MARK: Relationship {{ relationshipName }}

extension {{ entityClassName }} {
    {% if relationship.isOrdered %}
    @objc(insertObject:in{{ relationshipName }}AtIndex:)
    @NSManaged public func insertInto{{ relationshipName }}(_ value: {{ destinationEntityClassName }}, at idx: Int)

    @objc(removeObjectFrom{{ relationshipName }}AtIndex:)
    @NSManaged public func removeFrom{{ relationshipName }}(at idx: Int)

    @objc(insert{{ relationshipName }}:atIndexes:)
    @NSManaged public func insertInto{{ relationshipName }}(_ values: [{{ destinationEntityClassName }}], at indexes: NSIndexSet)

    @objc(remove{{ relationshipName }}AtIndexes:)
    @NSManaged public func removeFrom{{ relationshipName }}(at indexes: NSIndexSet)

    @objc(replaceObjectIn{{ relationshipName }}AtIndex:withObject:)
    @NSManaged public func replace{{ relationshipName }}(at idx: Int, with value: {{ destinationEntityClassName }})

    @objc(replace{{ relationshipName }}AtIndexes:with{{ relationshipName }}:)
    @NSManaged public func replace{{ relationshipName }}(at indexes: NSIndexSet, with values: [{{ destinationEntityClassName }}])

    {% endif %}
    @objc(add{{ relationshipName }}Object:)
    @NSManaged public func addTo{{ relationshipName }}(_ value: {{ destinationEntityClassName }})

    @objc(remove{{ relationshipName }}Object:)
    @NSManaged public func removeFrom{{ relationshipName }}(_ value: {{ destinationEntityClassName }})

    @objc(add{{ relationshipName }}:)
    @NSManaged public func addTo{{ relationshipName }}(_ values: {{ collectionClassName }})

    @objc(remove{{ relationshipName }}:)
    @NSManaged public func removeFrom{{ relationshipName }}(_ values: {{ collectionClassName }})
}

{% endfor %}
{% if model.fetchRequests[entity.name].count > 0 %}
// MARK: Fetch Requests

extension {{ entityClassName }} {
    {% for fetchRequest in model.fetchRequests[entity.name] %}
    {% set resultTypeName -%}
        {%- if fetchRequest.resultType == "Object" -%}
        {{ entityClassName }}
        {%- elif fetchRequest.resultType == "Object ID" -%}
        NSManagedObjectID
        {%- elif fetchRequest.resultType == "Dictionary" -%}
        [String: Any]
        {%- endif -%}
    {%- endset %}
    class func fetch{{ fetchRequest.name | upperFirstLetter }}(managedObjectContext: NSManagedObjectContext
        {%- for variableName, variableType in fetchRequest.substitutionVariables -%}
        , {{ variableName | lowerFirstWord }}: {{ variableType }}
        {%- endfor -%}
    ) throws -> [{{ resultTypeName }}] {
        guard let persistentStoreCoordinator = managedObjectContext.persistentStoreCoordinator else {
            fatalError("Managed object context has no persistent store coordinator for getting fetch request templates")
        }
        let model = persistentStoreCoordinator.managedObjectModel
        let substitutionVariables: [String: Any] = [
            {% for variableName, variableType in fetchRequest.substitutionVariables %}
            "{{ variableName }}": {{ variableName | lowerFirstWord }}{{ "," if not forloop.last }}
            {% empty %}
            :
            {% endfor %}
        ]

        guard let fetchRequest = model.fetchRequestFromTemplate(withName: "{{ fetchRequest.name }}", substitutionVariables: substitutionVariables) else {
            fatalError("No fetch request template named '{{ fetchRequest.name }}' found.")
        }

        guard let result = try managedObjectContext.fetch(fetchRequest) as? [{{ resultTypeName }}] else {
            fatalError("Unable to cast fetch result to correct result type.")
        }

        return result
    }

    {% endfor %}
}

{% endif %}
{% endif %}
{% endfor %}
{% endfor %}

extension NSPredicate {
        {{ accessModifier }} static var all = NSPredicate(format: "TRUEPREDICATE")
        {{ accessModifier }} static var none = NSPredicate(format: "FALSEPREDICATE")
}

extension NSManagedObjectContext {
    {{ accessModifier }} func saveContext (){
        if self.hasChanges {
            do {
                try self.save()
            } catch {
                let nsError = error as NSError
                fatalError("Unresolved error \(nsError), \(nsError.userInfo)")
            }
        }
    }
}
// swiftlint:enable identifier_name line_length type_body_length