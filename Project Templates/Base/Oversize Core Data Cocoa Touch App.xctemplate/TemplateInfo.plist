<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>Identifier</key>
	<string>com.apple.dt.unit.coreDataCocoaTouchApplication.oversize</string>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.application.SwiftUI.iOS.oversize</string>
	</array>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>storageType</string>
			<key>Units</key>
			<dict>
				<key>Core Data</key>
				<array>
					<dict>
						<key>RequiredOptions</key>
						<dict>
							<key>appLifecycle</key>
							<string>Cocoa</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</string>
						</array>
						<key>Definitions</key>
						<dict>
							<key>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</key>
							<dict>
								<key>Path</key>
								<string>___PACKAGENAMEASIDENTIFIER___.xcdatamodeld</string>
								<key>SortOrder</key>
								<integer>99</integer>
							</dict>
						</dict>
					</dict>
					<dict>
						<key>RequiredOptions</key>
						<dict>
							<key>languageChoice</key>
							<string>Objective-C</string>
							<key>appLifecycle</key>
							<string>Cocoa</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>AppDelegate.h:imports:importFramework:CoreData</string>
							<string>AppDelegate.h:interface:coreData</string>
							<string>AppDelegate.m:implementation:methods:applicationDidEnterBackground:save</string>
							<string>AppDelegate.m:implementation:coreData</string>
						</array>
						<key>Definitions</key>
						<dict>
							<key>*:importCoreData</key>
							<string>#import &lt;CoreData/CoreData.h&gt;
</string>
							<key>AppDelegate.h:interface:coreData</key>
							<string>@property (readonly, strong) ___VARIABLE_persistentContainerClass___ *persistentContainer;

- (void)saveContext;
</string>
							<key>AppDelegate.m:implementation:methods:applicationDidEnterBackground:save</key>
							<string>// Saves changes in the application&apos;s managed object context when the application transitions to the background.
[self saveContext];
</string>
							<key>AppDelegate.m:implementation:coreData</key>
							<string>#pragma mark - Core Data stack

@synthesize persistentContainer = _persistentContainer;

- (___VARIABLE_persistentContainerClass___ *)persistentContainer {
    // The persistent container for the application. This implementation creates and returns a container, having loaded the store for the application to it.
    @synchronized (self) {
        if (_persistentContainer == nil) {
            _persistentContainer = [[___VARIABLE_persistentContainerClass___ alloc] initWithName:@&quot;___PACKAGENAMEASIDENTIFIER___&quot;];
            [_persistentContainer loadPersistentStoresWithCompletionHandler:^(NSPersistentStoreDescription *storeDescription, NSError *error) {
                if (error != nil) {
                    // Replace this implementation with code to handle the error appropriately.
                    // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
                    
                    /*
                     Typical reasons for an error here include:
                     * The parent directory does not exist, cannot be created, or disallows writing.
                     * The persistent store is not accessible, due to permissions or data protection when the device is locked.
                     * The device is out of space.
                     * The store could not be migrated to the current model version.
                     Check the error message to determine what the actual problem was.
                    */
                    NSLog(@&quot;Unresolved error %@, %@&quot;, error, error.userInfo);
                    abort();
                }
            }];
        }
    }
    
    return _persistentContainer;
}

#pragma mark - Core Data Saving support

- (void)saveContext {
    NSManagedObjectContext *context = self.persistentContainer.viewContext;
    NSError *error = nil;
    if ([context hasChanges] &amp;&amp; ![context save:&amp;error]) {
        // Replace this implementation with code to handle the error appropriately.
        // abort() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
        NSLog(@&quot;Unresolved error %@, %@&quot;, error, error.userInfo);
        abort();
    }
}
</string>
						</dict>
					</dict>
					<dict>
						<key>RequiredOptions</key>
						<dict>
							<key>languageChoice</key>
							<string>Swift</string>
							<key>appLifecycle</key>
							<string>Cocoa</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>AppDelegate.swift:imports:importFramework:CoreData</string>
							<string>AppDelegate.swift:implementation:methods:applicationDidEnterBackground:save</string>
							<string>AppDelegate.swift:implementation:coreData</string>
						</array>
						<key>Definitions</key>
						<dict>
							<key>AppDelegate.swift:implementation:methods:applicationDidEnterBackground:save</key>
							<string>// Saves changes in the application&apos;s managed object context when the application transitions to the background.
self.saveContext()
</string>
							<key>AppDelegate.swift:implementation:coreData</key>
							<string>// MARK: - Core Data stack

lazy var persistentContainer: ___VARIABLE_persistentContainerClass___ = {
    /*
     The persistent container for the application. This implementation
     creates and returns a container, having loaded the store for the
     application to it. This property is optional since there are legitimate
     error conditions that could cause the creation of the store to fail.
    */
    let container = ___VARIABLE_persistentContainerClass___(name: &quot;___PACKAGENAMEASIDENTIFIER___&quot;)
    container.loadPersistentStores(completionHandler: { (storeDescription, error) in
        if let error = error as NSError? {
            // Replace this implementation with code to handle the error appropriately.
            // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
             
            /*
             Typical reasons for an error here include:
             * The parent directory does not exist, cannot be created, or disallows writing.
             * The persistent store is not accessible, due to permissions or data protection when the device is locked.
             * The device is out of space.
             * The store could not be migrated to the current model version.
             Check the error message to determine what the actual problem was.
             */
            fatalError(&quot;Unresolved error \(error), \(error.userInfo)&quot;)
        }
    })
    return container
}()

// MARK: - Core Data Saving support

func saveContext () {
    let context = persistentContainer.viewContext
    if context.hasChanges {
        do {
            try context.save()
        } catch {
            // Replace this implementation with code to handle the error appropriately.
            // fatalError() causes the application to generate a crash log and terminate. You should not use this function in a shipping application, although it may be useful during development.
            let nserror = error as NSError
            fatalError(&quot;Unresolved error \(nserror), \(nserror.userInfo)&quot;)
        }
    }
}
</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Identifier</key>
			<string>hostInCloudKit</string>
			<key>Units</key>
			<dict>
				<key>true</key>
				<array>
					<dict>
						<key>Nodes</key>
						<array>
							<string>___PACKAGENAME:identifier___.entitlements</string>
							<string>Info.plist:UIBackgroundModes</string>
						</array>
						<key>Definitions</key>
						<dict>
							<key>___PACKAGENAME:identifier___.entitlements</key>
							<dict>
								<key>Path</key>
								<string>App-CloudKit.entitlements</string>
								<key>SortOrder</key>
								<integer>105</integer>
								<key>TargetIdentifiers</key>
								<array/>
							</dict>
							<key>Info.plist:UIBackgroundModes</key>
							<string>&lt;key&gt;UIBackgroundModes&lt;/key&gt;
&lt;array&gt;
    &lt;string&gt;remote-notification&lt;/string&gt;
&lt;/array&gt;
</string>
						</dict>
						<key>Targets</key>
						<array>
							<dict>
								<key>TargetIdentifier</key>
								<string>com.apple.dt.cocoaTouchApplicationTarget</string>
								<key>SharedSettings</key>
								<dict>
									<key>INFOPLIST_FILE</key>
									<string>___PACKAGENAME___/Info.plist</string>
									<key>CODE_SIGN_ENTITLEMENTS</key>
									<string>___PACKAGENAME___/___PACKAGENAMEASIDENTIFIER___.entitlements</string>
								</dict>
							</dict>
						</array>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
</dict>
</plist>
